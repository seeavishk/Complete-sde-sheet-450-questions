//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// Code her
class Solution {  
private:  
    bool dfs(int node, int col, int color[], vector<int> adj[]) {  
        color[node] = col;  // Store the color of the node  
        for (auto it : adj[node]) {  // Iterate through all adjacent nodes  
            if (color[it] == -1) {  
                if (dfs(it, 1 - col, color, adj) == false) return false; // Alternate color  
            }  
            else if (color[it] == col) {  
                return false; // If the adjacent node has the same color  
            }  
        }  
        return true;  
    }  
    
public:  
    bool isBipartite(int V, vector<int> adj[]) {  
        // Code here  
        int color[V];  
        for (int i = 0; i < V; i++) color[i] = -1; // Initialize all nodes as uncolored  
        for (int i = 0; i < V; i++) {  
            if (color[i] == -1) {  
                if (dfs(i, 0, color, adj) == false) return false; // Start DFS  
            }  
        }  
        return true; // All nodes can be colored in a bipartite way  
    }  
};


//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}
// } Driver Code Ends
