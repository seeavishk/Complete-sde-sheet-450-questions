//In last question of the grid we had the priviledge to go consecutively from one part to other but her it's not the case we can't do that because it's not uniform HENCE  not the greedy because the greedy could be applied on the uniform element only ...
/*The dp steps 1->Change into the index.s 
*              2->Explore all the paths
               3-Min of all paths....*/ 
               // TWO LOOPS ONE FOR THE DIAGONAL AND OTHER FOR THE ROW IN THE LOWER COLUMN..
               //....Doing by the tabulation approach..
class Solution {  
public:  
    int minimumTotal(vector<vector<int>>& triangle) {  
        int n = triangle.size(); // Get the number of rows in the triangle  
        vector<vector<int>> dp(n, vector<int>(n, 0)); // Create a DP table to store min path sums  

        // Initialize the last row of dp with the values from the triangle  
        for(int j = 0; j < n; j++){  
            dp[n-1][j] = triangle[n-1][j]; // Base case: last row in the triangle  
        }  

        // Fill the DP table from bottom to top  
        for(int i = n - 2; i >= 0; i--) { // Start from second-to-last row  
            for(int j = 0; j <= i; j++) { // Only iterate until the current row index  
                // Calculate the minimum path from the current position  
                int down = triangle[i][j] + dp[i + 1][j]; // Path going down  
                int diagonal = triangle[i][j] + dp[i + 1][j + 1]; // Path going diagonally down  
                dp[i][j] = min(down, diagonal); // Store the minimum path sum  
            }  
        }  

        // The result is at the top of the triangle  
        return dp[0][0];   
    }  
};
//********Space optimization
// class Solution {  
// public:  
//     int minimumTotal(vector<vector<int>>& triangle) {  
//         int n = triangle.size();   
//         vector<int> dp(n); // Create a 1D DP array  

//         // Initialize the DP array with the last row of the triangle  
//         for(int j = 0; j < n; j++){  
//             dp[j] = triangle[n - 1][j];   
//         }  

//         // Fill the DP array from bottom to top  
//         for(int i = n - 2; i >= 0; i--) {  
//             for(int j = 0; j <= i; j++) {  
//                 // Calculate the minimum path from the current position  
//                 int down = triangle[i][j] + dp[j]; // Move straight down  
//                 int diagonal = triangle[i][j] + dp[j + 1]; // Move diagonally  
//                 dp[j] = min(down, diagonal); // Update the current position  
//             }  
//         }  

//         // The result is at the top of the triangle  
//         return dp[0];   
//     }  
// };
