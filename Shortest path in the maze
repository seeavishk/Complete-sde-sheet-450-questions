#include <vector>  
#include <queue>  
#include <utility>  
#include <algorithm>  

using namespace std;  

class Solution {  
public:  
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {  
        int n = grid.size();  
        int m = grid[0].size();  

        // Check if the starting or ending point is blocked  
        if (grid[0][0] == 1 || grid[n - 1][m - 1] == 1) {  
            return -1;  // No valid path  
        }  

        // Directions for the 8 possible moves  
        vector<pair<int, int>> directions = {  
            {0, 1}, {1, 0}, {0, -1}, {-1, 0},  
            {1, 1}, {1, -1}, {-1, 1}, {-1, -1}  
        };  

        // Priority queue for Dijkstra's algorithm (distance, (x, y))  
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;  
        
        pq.push({1, {0, 0}});  // Starting from the top-left corner with distance 1  
        vector<vector<bool>> visited(n, vector<bool>(m, false));  
        visited[0][0] = true;  

        while (!pq.empty()) {  
            auto [dist, coord] = pq.top();  
            pq.pop();  

            int x = coord.first;  
            int y = coord.second;  

            // If we reached the bottom-right corner  
            if (x == n - 1 && y == m - 1) {  
                return dist;  // Return the distance  
            }  
            
            // Explore all 8 directions  
            for (const auto& dir : directions) {  
                int newX = x + dir.first;  
                int newY = y + dir.second;  

                // Check for valid coordinates and unvisited cell  
                if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == 0 && !visited[newX][newY]) {  
                    visited[newX][newY] = true;  
                    pq.push({dist + 1, {newX, newY}});  
                }  
            }  
        }  

        return -1;  // If we exhaust the priority queue, there's no path  
    }  
};
