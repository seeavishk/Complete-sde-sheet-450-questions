//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.

        // Code here
        vector<int> dijkstra(int V, vector<vector<int>> adj[], int S) {  
    // Create a priority queue to store (distance, node) pairs  
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;  

    // Initialize distance vector with maximum values  
    vector<int> dist(V, numeric_limits<int>::max());  
    dist[S] = 0; // Distance from source to itself is 0  
    pq.push({0, S}); // Push the source node into the queue  

    while (!pq.empty()) {  
        int dis = pq.top().first;  // Current minimum distance  
        int node = pq.top().second; // Current node  
        pq.pop();  

        // Iterate through all adjacent nodes  
        for (const auto& it : adj[node]) {  
            int adjNode = it[0];     // Adjacent node  
            int edgeWt = it[1];      // Edge weight  
            
            // Check if the current path to adjNode is shorter  
            if (dis + edgeWt < dist[adjNode]) {  
                dist[adjNode] = dis + edgeWt; // Update distance  
                pq.push({dist[adjNode], adjNode}); // Push the updated distance into the queue  
            }  
        }  
    }  
    
    return dist; // Return the final distance vector  
} 
};


//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}


// } Driver Code Ends
