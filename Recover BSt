/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //Brute force could be to use the inorder of the given problem and then compare it to get the better value..
 //Two cases would come the first one when the two nodes are ADJACENT and the other is non-adjacent condition...while fetching the values in the array use the two violations of the array..
 //Violation no.1->if node[i+1]<node[i] and node[i+1]>node[i]
class Solution {  
private:  
    TreeNode* prev;   // Pointer to keep track of the previous node in the inorder traversal  
    TreeNode* first;  // Pointer to the first node that is out of order  
    TreeNode* middle; // Pointer to the middle node (used when the first is found)  
    TreeNode* last;   // Pointer to the last node that is out of order  

    // Helper function to perform inorder traversal of the tree  
    void inorder(TreeNode* root) {  
        // Base case: if the current node is NULL, just return  
        if (root == NULL) return;  

        // Traverse the left child first  
        inorder(root->left);  

        // Check for the condition where the current node is less than the previous node  
        if (prev != NULL && (root->val < prev->val)) {  
            if (first == NULL) {  
                // First violation: we found the first node out of order  
                first = prev; // Set 'first' to previous node  
                middle = root; // Set 'middle' to current node  
            } else {  
                // Second violation: we found the last node out of order  
                last = root; // Set 'last' to current node  
            }  
        }  

        // Update the previous pointer to the current node  
        prev = root;  

        // Continue traversing the right child  
        inorder(root->right);  
    }  

public:  
    void recoverTree(TreeNode* root) {  
        first = middle = last = NULL; // Initialize pointers to NULL  
        prev = new TreeNode(INT_MIN); // Initialize prev with a minimum value node  
        
        // Perform inorder traversal to find the two nodes that are swapped  
        inorder(root);  
        
        // Swap the values of the detected erroneous nodes depending on which two are found  
        if (first && last)   
            swap(first->val, last->val); // If both first and last are identified  
        else if (first && middle)   
            swap(first->val, middle->val); // If only first and middle are identified  
    }  
};
